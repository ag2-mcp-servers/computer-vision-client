# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:08:27+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path

from models import (
    ComputerVisionError,
    ImageUrl,
    Mode,
    ReadOperationResult,
    TextOperationResult,
)

app = MCPProxy(
    contact={'x-twitter': 'microsoft'},
    description='The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.',
    title='Computer Vision Client',
    version='2.1',
    servers=[
        {'url': 'https://westcentralus.api.cognitive.microsoft.com/vision/v2.1'},
        {
            'url': '{Endpoint}/vision/v2.1',
            'variables': {
                'Endpoint': {
                    'default': 'none',
                    'description': 'Supported Cognitive Services endpoints.',
                    'x-ms-parameter-location': 'client',
                    'x-ms-skip-url-encoding': True,
                }
            },
        },
    ],
)


@app.post(
    '/read/core/asyncBatchAnalyze',
    description=""" Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.â€‹ """,
    tags=['optical_character_recognition'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
    ],
)
def batch_read_file(body: ImageUrl):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/read/operations/{operationId}',
    description=""" This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface. """,
    tags=['file_access_operations', 'optical_character_recognition'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
    ],
)
def get_read_operation_result(operation_id: str = Path(..., alias='operationId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/recognizeText',
    description=""" Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation. """,
    tags=['optical_character_recognition'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
    ],
)
def recognize_text(mode: Mode, body: ImageUrl = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/textOperations/{operationId}',
    description=""" This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface. """,
    tags=['file_access_operations'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
    ],
)
def get_text_operation_result(operation_id: str = Path(..., alias='operationId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
