# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:08:27+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class BoundingBox(RootModel[List[float]]):
    root: List[float] = Field(
        ...,
        description='Quadrangle bounding box, with coordinates in original image. The eight numbers represent the four points (x-coordinate, y-coordinate from the left-top corner of the image) of the detected rectangle from the left-top corner in the clockwise direction. For images, coordinates are in pixels. For PDF, coordinates are in inches.',
    )


class Code(Enum):
    InvalidImageFormat = 'InvalidImageFormat'
    UnsupportedMediaType = 'UnsupportedMediaType'
    InvalidImageUrl = 'InvalidImageUrl'
    NotSupportedFeature = 'NotSupportedFeature'
    NotSupportedImage = 'NotSupportedImage'
    Timeout = 'Timeout'
    InternalServerError = 'InternalServerError'
    InvalidImageSize = 'InvalidImageSize'
    BadArgument = 'BadArgument'
    DetectFaceError = 'DetectFaceError'
    NotSupportedLanguage = 'NotSupportedLanguage'
    InvalidThumbnailSize = 'InvalidThumbnailSize'
    InvalidDetails = 'InvalidDetails'
    InvalidModel = 'InvalidModel'
    CancelledRequest = 'CancelledRequest'
    NotSupportedVisualFeature = 'NotSupportedVisualFeature'
    FailedToProcess = 'FailedToProcess'
    Unspecified = 'Unspecified'
    StorageException = 'StorageException'


class ComputerVisionError(BaseModel):
    code: Code = Field(..., description='The error code.')
    message: str = Field(
        ..., description='A message explaining the error reported by the service.'
    )
    requestId: Optional[str] = Field(None, description='A unique request identifier.')


class ImageUrl(BaseModel):
    url: str = Field(..., description='Publicly reachable URL of an image.')


class OperationStatus(Enum):
    NotStarted = 'NotStarted'
    Running = 'Running'
    Failed = 'Failed'
    Succeeded = 'Succeeded'


class Unit(Enum):
    pixel = 'pixel'
    inch = 'inch'


class Confidence(Enum):
    High = 'High'
    Low = 'Low'


class Word(BaseModel):
    boundingBox: BoundingBox
    confidence: Optional[Confidence] = Field(
        None, description='Qualitative confidence measure.'
    )
    text: str = Field(..., description='The text content of the word.')


class Mode(Enum):
    Handwritten = 'Handwritten'
    Printed = 'Printed'


class Line(BaseModel):
    boundingBox: Optional[BoundingBox] = None
    text: Optional[str] = Field(None, description='The text content of the line.')
    words: Optional[List[Word]] = Field(
        None, description='List of words in the text line.'
    )


class TextRecognitionResult(BaseModel):
    clockwiseOrientation: Optional[float] = Field(
        None,
        description='The orientation of the image in degrees in the clockwise direction. Range between [0, 360).',
    )
    height: Optional[float] = Field(
        None, description='The height of the image in pixels or the PDF in inches.'
    )
    lines: List[Line] = Field(..., description='A list of recognized text lines.')
    page: Optional[int] = Field(
        None, description='The 1-based page number of the recognition result.'
    )
    unit: Optional[Unit] = Field(
        None,
        description="The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is 'inch'.",
    )
    width: Optional[float] = Field(
        None, description='The width of the image in pixels or the PDF in inches.'
    )


class ReadOperationResult(BaseModel):
    recognitionResults: Optional[List[TextRecognitionResult]] = Field(
        None, description='An array of text recognition result of the read operation.'
    )
    status: Optional[OperationStatus] = None


class TextOperationResult(BaseModel):
    recognitionResult: Optional[TextRecognitionResult] = None
    status: Optional[OperationStatus] = None
